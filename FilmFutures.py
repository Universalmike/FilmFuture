{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dd5521b2-ba00-43fc-9870-6e928c8a6531",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from country_converter import CountryConverter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f821ecd7-cd2b-483a-9d33-3e2c16897e5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>type</th>\n",
       "      <th>release_year</th>\n",
       "      <th>age_certification</th>\n",
       "      <th>runtime</th>\n",
       "      <th>Unnamed: 5</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_countries</th>\n",
       "      <th>seasons</th>\n",
       "      <th>imdb_id</th>\n",
       "      <th>imdb_score</th>\n",
       "      <th>imdb_votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Five Came Back: The Reference Films</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>1945</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>48</td>\n",
       "      <td>NaN</td>\n",
       "      <td>documentation</td>\n",
       "      <td>US</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>R</td>\n",
       "      <td>113</td>\n",
       "      <td>NaN</td>\n",
       "      <td>crime, drama</td>\n",
       "      <td>US</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0075314</td>\n",
       "      <td>8.3</td>\n",
       "      <td>795222.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Monty Python and the Holy Grail</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1975</td>\n",
       "      <td>PG</td>\n",
       "      <td>91</td>\n",
       "      <td>NaN</td>\n",
       "      <td>comedy, fantasy</td>\n",
       "      <td>GB</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0071853</td>\n",
       "      <td>8.2</td>\n",
       "      <td>530877.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Life of Brian</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1979</td>\n",
       "      <td>R</td>\n",
       "      <td>94</td>\n",
       "      <td>NaN</td>\n",
       "      <td>comedy</td>\n",
       "      <td>GB</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0079470</td>\n",
       "      <td>8.0</td>\n",
       "      <td>392419.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The Exorcist</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1973</td>\n",
       "      <td>R</td>\n",
       "      <td>133</td>\n",
       "      <td>NaN</td>\n",
       "      <td>horror</td>\n",
       "      <td>US</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0070047</td>\n",
       "      <td>8.1</td>\n",
       "      <td>391942.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 title   type  release_year age_certification  \\\n",
       "0  Five Came Back: The Reference Films   SHOW          1945             TV-MA   \n",
       "1                          Taxi Driver  MOVIE          1976                 R   \n",
       "2      Monty Python and the Holy Grail  MOVIE          1975                PG   \n",
       "3                        Life of Brian  MOVIE          1979                 R   \n",
       "4                         The Exorcist  MOVIE          1973                 R   \n",
       "\n",
       "   runtime  Unnamed: 5           genres production_countries  seasons  \\\n",
       "0       48         NaN    documentation                   US      1.0   \n",
       "1      113         NaN     crime, drama                   US      NaN   \n",
       "2       91         NaN  comedy, fantasy                   GB      NaN   \n",
       "3       94         NaN           comedy                   GB      NaN   \n",
       "4      133         NaN           horror                   US      NaN   \n",
       "\n",
       "     imdb_id  imdb_score  imdb_votes  \n",
       "0        NaN         NaN         NaN  \n",
       "1  tt0075314         8.3    795222.0  \n",
       "2  tt0071853         8.2    530877.0  \n",
       "3  tt0079470         8.0    392419.0  \n",
       "4  tt0070047         8.1    391942.0  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"Documents/Visual Studio 2017/imdb_movies_shows(2).csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f1973eb2-23a8-4f1e-a39b-5744e129fd71",
   "metadata": {},
   "outputs": [],
   "source": [
    "cc = CountryConverter()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b38ec0f6-0126-43c7-8ec7-eef499fc378f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "SU not found in ISO2\n",
      "SU not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n",
      "XX not found in ISO2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>type</th>\n",
       "      <th>release_year</th>\n",
       "      <th>age_certification</th>\n",
       "      <th>runtime</th>\n",
       "      <th>Unnamed: 5</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_countries</th>\n",
       "      <th>seasons</th>\n",
       "      <th>imdb_id</th>\n",
       "      <th>imdb_score</th>\n",
       "      <th>imdb_votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Five Came Back: The Reference Films</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>1945</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>48</td>\n",
       "      <td>NaN</td>\n",
       "      <td>documentation</td>\n",
       "      <td>United States</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>R</td>\n",
       "      <td>113</td>\n",
       "      <td>NaN</td>\n",
       "      <td>crime, drama</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0075314</td>\n",
       "      <td>8.3</td>\n",
       "      <td>795222.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Monty Python and the Holy Grail</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1975</td>\n",
       "      <td>PG</td>\n",
       "      <td>91</td>\n",
       "      <td>NaN</td>\n",
       "      <td>comedy, fantasy</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0071853</td>\n",
       "      <td>8.2</td>\n",
       "      <td>530877.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Life of Brian</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1979</td>\n",
       "      <td>R</td>\n",
       "      <td>94</td>\n",
       "      <td>NaN</td>\n",
       "      <td>comedy</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0079470</td>\n",
       "      <td>8.0</td>\n",
       "      <td>392419.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The Exorcist</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1973</td>\n",
       "      <td>R</td>\n",
       "      <td>133</td>\n",
       "      <td>NaN</td>\n",
       "      <td>horror</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0070047</td>\n",
       "      <td>8.1</td>\n",
       "      <td>391942.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 title   type  release_year age_certification  \\\n",
       "0  Five Came Back: The Reference Films   SHOW          1945             TV-MA   \n",
       "1                          Taxi Driver  MOVIE          1976                 R   \n",
       "2      Monty Python and the Holy Grail  MOVIE          1975                PG   \n",
       "3                        Life of Brian  MOVIE          1979                 R   \n",
       "4                         The Exorcist  MOVIE          1973                 R   \n",
       "\n",
       "   runtime  Unnamed: 5           genres production_countries  seasons  \\\n",
       "0       48         NaN    documentation        United States      1.0   \n",
       "1      113         NaN     crime, drama        United States      NaN   \n",
       "2       91         NaN  comedy, fantasy       United Kingdom      NaN   \n",
       "3       94         NaN           comedy       United Kingdom      NaN   \n",
       "4      133         NaN           horror        United States      NaN   \n",
       "\n",
       "     imdb_id  imdb_score  imdb_votes  \n",
       "0        NaN         NaN         NaN  \n",
       "1  tt0075314         8.3    795222.0  \n",
       "2  tt0071853         8.2    530877.0  \n",
       "3  tt0079470         8.0    392419.0  \n",
       "4  tt0070047         8.1    391942.0  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#converting the country codes to full name\n",
    "\n",
    "#function to convert codes to full names\n",
    "def convert_codes(codes):\n",
    "    #check if the value is NaN or not a string, return an empty string in that case\n",
    "    if pd.isna(codes) or not isinstance(codes, str):\n",
    "        return ''\n",
    "    #split the codes into a list\n",
    "    code_list = codes.split(', ')\n",
    "    ful = [cc.convert(names=code.strip(), to='name_short') for code in code_list]\n",
    "    return ', '.join(ful)\n",
    "\n",
    "#apllying the function to the dataframe\n",
    "df['production_countries'] = df['production_countries'].apply(convert_codes)\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "80474c0d-1d66-4d1d-937a-812212dc950d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>type</th>\n",
       "      <th>release_year</th>\n",
       "      <th>age_certification</th>\n",
       "      <th>runtime</th>\n",
       "      <th>Unnamed: 5</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_countries</th>\n",
       "      <th>seasons</th>\n",
       "      <th>imdb_id</th>\n",
       "      <th>imdb_score</th>\n",
       "      <th>imdb_votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Five Came Back: The Reference Films</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>1945</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>48</td>\n",
       "      <td>NaN</td>\n",
       "      <td>documentation</td>\n",
       "      <td>United States</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>R</td>\n",
       "      <td>113</td>\n",
       "      <td>NaN</td>\n",
       "      <td>crime, drama</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0075314</td>\n",
       "      <td>8.3</td>\n",
       "      <td>795222.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Monty Python and the Holy Grail</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1975</td>\n",
       "      <td>PG</td>\n",
       "      <td>91</td>\n",
       "      <td>NaN</td>\n",
       "      <td>comedy, fantasy</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0071853</td>\n",
       "      <td>8.2</td>\n",
       "      <td>530877.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Life of Brian</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1979</td>\n",
       "      <td>R</td>\n",
       "      <td>94</td>\n",
       "      <td>NaN</td>\n",
       "      <td>comedy</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0079470</td>\n",
       "      <td>8.0</td>\n",
       "      <td>392419.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The Exorcist</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1973</td>\n",
       "      <td>R</td>\n",
       "      <td>133</td>\n",
       "      <td>NaN</td>\n",
       "      <td>horror</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tt0070047</td>\n",
       "      <td>8.1</td>\n",
       "      <td>391942.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 title   type  release_year age_certification  \\\n",
       "0  Five Came Back: The Reference Films   SHOW          1945             TV-MA   \n",
       "1                          Taxi Driver  MOVIE          1976                 R   \n",
       "2      Monty Python and the Holy Grail  MOVIE          1975                PG   \n",
       "3                        Life of Brian  MOVIE          1979                 R   \n",
       "4                         The Exorcist  MOVIE          1973                 R   \n",
       "\n",
       "   runtime  Unnamed: 5           genres production_countries  seasons  \\\n",
       "0       48         NaN    documentation        United States      1.0   \n",
       "1      113         NaN     crime, drama        United States      NaN   \n",
       "2       91         NaN  comedy, fantasy       United Kingdom      NaN   \n",
       "3       94         NaN           comedy       United Kingdom      NaN   \n",
       "4      133         NaN           horror        United States      NaN   \n",
       "\n",
       "     imdb_id  imdb_score  imdb_votes  \n",
       "0        NaN         NaN         NaN  \n",
       "1  tt0075314         8.3    795222.0  \n",
       "2  tt0071853         8.2    530877.0  \n",
       "3  tt0079470         8.0    392419.0  \n",
       "4  tt0070047         8.1    391942.0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['production_countries'] = df['production_countries'].replace('not found', 'Unknown')\n",
    "df['age_certification'] = df['age_certification'].fillna('Unknown')\n",
    "df['genres'] = df['genres'].fillna('Unkown')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "963c24b9-8a2d-46e1-a2a3-92008759eda6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['United States', 'United Kingdom', 'United States, United Kingdom',\n",
       "       'Japan', 'Egypt', 'Germany', 'India', '', 'Algeria, Egypt',\n",
       "       'Lebanon', 'France, Lebanon, Canada', 'India, not found',\n",
       "       'United States, Italy', 'Hong Kong, United States',\n",
       "       'United Kingdom, United States', 'Argentina', 'Kuwait',\n",
       "       'Egypt, France', 'France, Lebanon', 'United States, Japan',\n",
       "       'United States, Canada', 'Germany, United States',\n",
       "       'United States, Germany', 'Canada, United States',\n",
       "       'United States, France', 'Peru, United States, Brazil',\n",
       "       'Italy, United States, France', 'United States, Hong Kong',\n",
       "       'France, Ireland, United Kingdom, Germany',\n",
       "       'Ghana, United Kingdom, United States, Burkina Faso, Germany',\n",
       "       'Argentina, Spain', 'France', 'Mexico', 'Australia', 'Colombia',\n",
       "       'Belgium, France, Norway, Lebanon',\n",
       "       'Italy, Lebanon, Belgium, France',\n",
       "       'United States, France, Germany, Palestine', 'Türkiye', 'Canada',\n",
       "       'United Kingdom, United States, Bahamas, Czechia, Germany',\n",
       "       'United Kingdom, United States, Australia',\n",
       "       'Germany, Spain, United States, France',\n",
       "       'United Kingdom, United States, Australia, Germany',\n",
       "       'Japan, United States', 'United States, Iceland, United Kingdom',\n",
       "       'Denmark', 'New Zealand, Japan, United States',\n",
       "       'United States, Canada, France',\n",
       "       'United Kingdom, United States, Germany',\n",
       "       'United States, Germany, Italy, United Kingdom',\n",
       "       'Canada, Germany, United States', 'Hong Kong, China',\n",
       "       'Italy, United States', 'France, Japan, United States',\n",
       "       'United States, Belgium', 'South Korea', 'Italy',\n",
       "       'Bulgaria, United Kingdom, United States',\n",
       "       'United States, Australia', 'Spain, United Kingdom',\n",
       "       'United Kingdom, United States, Japan', 'China, Hong Kong',\n",
       "       'Russia', 'China', 'Singapore',\n",
       "       'United Kingdom, United States, Canada', 'Hong Kong, Japan',\n",
       "       'Canada, United Kingdom, United States', 'Spain, France, Mexico',\n",
       "       'India, Canada, United States',\n",
       "       'Palestine, France, Morocco, Germany', 'Hong Kong',\n",
       "       'Germany, Uruguay, Spain, Argentina', 'Spain, Argentina',\n",
       "       'United States, India', 'Taiwan', 'India, United States',\n",
       "       'Malaysia', 'Spain, Switzerland, Palestine, Belgium, France',\n",
       "       'Chile, Argentina', 'Germany, Kuwait, Palestine, France', 'Chile',\n",
       "       'Nigeria', 'Palestine', 'United Kingdom, France, Lebanon',\n",
       "       'South Africa', 'Saudi Arabia',\n",
       "       'Nigeria, United Kingdom, United States, Austria, France, Germany',\n",
       "       'Lebanon, France',\n",
       "       'United Kingdom, Denmark, Netherlands, Sweden, Czechia',\n",
       "       'Philippines', 'Thailand, India', 'Nigeria, United States',\n",
       "       'Unknown', 'United States, Spain', 'Norway, Sweden, United States',\n",
       "       'United States, United Arab Emirates',\n",
       "       'Canada, Hungary, United States', 'Denmark, United States',\n",
       "       'Norway', 'United Kingdom, France, Germany',\n",
       "       'United States, Hungary, Italy',\n",
       "       'United States, South Africa, Germany', 'Germany, India',\n",
       "       'United Kingdom, Nigeria',\n",
       "       'United Arab Emirates, United States, Lebanon', 'Indonesia',\n",
       "       'Netherlands, United States, United Arab Emirates, Palestine',\n",
       "       'France, United Kingdom, United States',\n",
       "       'United States, Germany, United Kingdom',\n",
       "       'Canada, Chile, United States', 'Israel',\n",
       "       'Australia, United States',\n",
       "       'United States, United Kingdom, China, Canada', 'Spain',\n",
       "       'United Kingdom, Australia, Switzerland', 'France, United States',\n",
       "       'United States, United Kingdom, Canada', 'Canada, South Korea',\n",
       "       'Canada, France', 'Austria', 'United States, Denmark',\n",
       "       'United States, Brazil', 'Finland',\n",
       "       'United Kingdom, United States, Egypt', 'Romania',\n",
       "       'DR Congo, United Kingdom', 'Brazil',\n",
       "       'United States, Canada, Japan', 'Poland', 'Venezuela, Argentina',\n",
       "       'Israel, Norway, South Africa, United Arab Emirates, United Kingdom, Iceland, Ireland',\n",
       "       'Ukraine, United States, China, Germany, Singapore',\n",
       "       'United Arab Emirates, Lebanon',\n",
       "       'Italy, Palestine, France, Germany', 'New Zealand', 'Ukraine',\n",
       "       'Belgium, France', 'United States, China',\n",
       "       'United States, France, United Kingdom', 'United Kingdom, Italy',\n",
       "       'Mexico, South Africa, United States',\n",
       "       'Spain, United States, United Kingdom',\n",
       "       'United Kingdom, Iran, Jordan, Qatar',\n",
       "       'Germany, United Kingdom, United States, Belgium, Denmark',\n",
       "       'Ukraine, United Kingdom, United States',\n",
       "       'United States, France, Luxembourg, United Kingdom',\n",
       "       'United States, Switzerland', 'United States, Ghana',\n",
       "       'Ireland, South Africa', 'Canada, Germany, United Kingdom',\n",
       "       'United Kingdom, Ireland', 'United States, Canada, United Kingdom',\n",
       "       'Iceland', 'France, United Kingdom',\n",
       "       'Sweden, Canada, Finland, France, Germany', 'Bulgaria', 'Belarus',\n",
       "       'Morocco, United States', 'Ireland', 'Canada, China, France',\n",
       "       'Germany, Australia, France', 'Slovakia, Czechia', 'Qatar, France',\n",
       "       'Qatar, Palestine, United Arab Emirates, France, Jordan, Lebanon',\n",
       "       'Morocco, France', 'Netherlands', 'Sweden', 'Croatia',\n",
       "       'Spain, France', 'Sweden, United States', 'France, Belgium',\n",
       "       'Syria, United Kingdom', 'Norway, Sweden', 'Greenland, France',\n",
       "       'United States, Austria', 'United Arab Emirates', 'DR Congo',\n",
       "       'France, Portugal, Sweden, Denmark, Brazil', 'Spain, Denmark',\n",
       "       'Australia, United Kingdom',\n",
       "       'Australia, United States, United Kingdom', 'Lebanon, Qatar',\n",
       "       'France, Germany, Palestine', 'Pakistan', 'United Kingdom, India',\n",
       "       'Japan, United States, Canada', 'Chile, France', 'Czechia',\n",
       "       'Vietnam', 'United Kingdom, Netherlands', 'Canada, Nigeria',\n",
       "       'France, Russia, United States',\n",
       "       'Canada, Hungary, Mexico, Spain, United Kingdom, United States',\n",
       "       'United States, France, Netherlands, United Kingdom',\n",
       "       'Canada, United States, China', 'United Kingdom, Canada',\n",
       "       'France, Canada', 'South Korea, United States',\n",
       "       'Mexico, United States', 'Belgium, France, United Kingdom',\n",
       "       'India, China, United States, United Kingdom',\n",
       "       'Belgium, France, United States',\n",
       "       'United Kingdom, United States, Czechia', 'Italy, Spain, France',\n",
       "       'United Kingdom, United States, France',\n",
       "       'Puerto Rico, United States, United Kingdom, China',\n",
       "       'Singapore, United States, United Kingdom, Indonesia, Canada, China',\n",
       "       'United Kingdom, United States, Singapore',\n",
       "       'United Kingdom, Germany', 'Hong Kong, Iceland, United States',\n",
       "       'Italy, Switzerland, France', 'United States, France, Iran',\n",
       "       'Norway, United States, Iceland', 'Iraq, United Kingdom',\n",
       "       'Belgium', 'Hungary', 'Germany, Canada, United States',\n",
       "       'Ireland, Canada', 'Puerto Rico', 'Bulgaria, United States',\n",
       "       'Cambodia, United States', 'United States, United Kingdom, Spain',\n",
       "       'China, United States, Spain', 'France, Georgia, Germany',\n",
       "       'United Kingdom, United States, Denmark', 'Thailand',\n",
       "       'Netherlands, Belgium', 'China, United States, Canada',\n",
       "       'Israel, Morocco, United States, Bulgaria, United Kingdom',\n",
       "       'France, Luxembourg, United States', 'Japan, France',\n",
       "       'Belgium, France, Italy', 'Türkiye, United States', 'Spain, Italy',\n",
       "       'Brazil, Canada', 'Canada, China', 'Spain, United States',\n",
       "       'Cuba, United States', 'South Africa, United Kingdom',\n",
       "       'Canada, United Kingdom', 'United States, Poland',\n",
       "       'Spain, Germany', 'Canada, United States, Ireland',\n",
       "       'Iceland, Sweden, Belgium', 'Switzerland, Germany', 'China, Japan',\n",
       "       'United States, Mexico', 'Denmark, Netherlands, Norway, Sweden',\n",
       "       'New Zealand, United Kingdom, Germany',\n",
       "       'Argentina, Spain, Uruguay', 'Luxembourg, Canada, France', 'Kenya',\n",
       "       'South Korea, France, Japan', 'Mexico, Spain',\n",
       "       'United States, Germany, South Africa', 'United Kingdom, Iceland',\n",
       "       'France, India', 'Italy, Switzerland, Vatican, France, Germany',\n",
       "       'Germany, Norway, Peru', 'United States, Nigeria',\n",
       "       'Singapore, Philippines', 'Germany, Italy',\n",
       "       'Netherlands, United States', 'Russia, Serbia, Poland',\n",
       "       'France, Italy', 'United Arab Emirates, Saudi Arabia, Syria',\n",
       "       'United Kingdom, Germany, Denmark, Netherlands',\n",
       "       'United Kingdom, United States, Israel, Italy, Peru',\n",
       "       'France, Spain', 'Poland, Switzerland, Albania, Italy', 'Peru',\n",
       "       'Singapore, Indonesia, Malaysia', 'Cambodia', 'India, Mexico',\n",
       "       'France, Argentina', 'Czechia, United States',\n",
       "       'Belgium, United Kingdom, United States', 'Tanzania',\n",
       "       'Qatar, Tunisia, Belgium, France', 'Mexico, Finland',\n",
       "       'Argentina, Brazil, Denmark, France, Germany, Poland',\n",
       "       'Taiwan, United States, China, France', 'Georgia',\n",
       "       'Chile, Netherlands, France', 'Belgium, Spain',\n",
       "       'Netherlands, Mexico', 'Canada, South Africa, United States',\n",
       "       'Zimbabwe', 'Austria, Iraq, United States', 'Paraguay',\n",
       "       'Italy, Argentina', 'Argentina, United States',\n",
       "       'France, India, Singapore',\n",
       "       'France, Palestine, Switzerland, Qatar',\n",
       "       'Netherlands, Jordan, Germany', 'Taiwan, United States',\n",
       "       'Mexico, Argentina', 'Ghana', 'Argentina, Italy',\n",
       "       'Mexico, Colombia', 'Lebanon, Palestine', 'India, Nepal',\n",
       "       'Canada, Japan, United States', 'Denmark, Greece, United Kingdom',\n",
       "       'Cameroon', 'Chile, Mexico, United States', 'India, Bangladesh',\n",
       "       'Norway, Nigeria', 'Switzerland', 'Kyrgyz Republic',\n",
       "       'South Africa, Canada', 'United States, China, Australia',\n",
       "       'Bangladesh', 'Japan, United Kingdom',\n",
       "       'Lithuania, Netherlands, Belgium', 'Canada, China, United States',\n",
       "       'United States, Bulgaria', 'United States, France, Ireland',\n",
       "       'Hungary, United States, Canada', 'United States, Cyprus',\n",
       "       'France, Lithuania, United Kingdom', 'China, United States',\n",
       "       'United Kingdom, France', 'Senegal, Belgium, France',\n",
       "       'Belgium, Sweden, United Kingdom',\n",
       "       'Malawi, United Kingdom, United States', 'United States, Israel',\n",
       "       'Portugal, United States', 'Ireland, United Kingdom',\n",
       "       'France, Spain, United States, Canada',\n",
       "       'United States, France, Sweden, United Kingdom, Germany, Denmark, Canada',\n",
       "       'Thailand, United States', 'Luxembourg',\n",
       "       'Czechia, France, United Kingdom', 'Norway, Finland',\n",
       "       'United States, China, Thailand',\n",
       "       'United Kingdom, United States, China',\n",
       "       'Switzerland, United States', 'Brazil, France, Spain, Belgium',\n",
       "       'Germany, Austria', 'India, United Kingdom', 'Brazil, Mexico',\n",
       "       'Argentina, Spain, France',\n",
       "       'United States, Albania, Jordan, Thailand',\n",
       "       'Israel, United States, France, Germany', 'Italy, United Kingdom',\n",
       "       'British Indian Ocean Territory', 'China, Germany, United Kingdom',\n",
       "       'Ukraine, United Kingdom, United States, Netherlands, Poland',\n",
       "       'Mauritius', 'Germany, Spain',\n",
       "       'Belgium, Cambodia, France, Luxembourg', 'Jordan',\n",
       "       'Palestine, Qatar', 'Spain, Belgium, Germany',\n",
       "       'Serbia, Uruguay, Argentina', 'France, United States, Japan',\n",
       "       'Singapore, France, Netherlands', 'Japan, United States, China',\n",
       "       'Spain, Mexico', 'Peru, Argentina', 'Spain, Portugal',\n",
       "       'Austria, Germany', 'United States, Argentina', 'Malaysia, Taiwan',\n",
       "       'Germany, Norway', 'Philippines, United States', 'Spain, Colombia',\n",
       "       'France, Spain, United States', 'Argentina, Canada, Chile',\n",
       "       'Egypt, United States', 'Spain, United States, Belgium',\n",
       "       'China, Spain',\n",
       "       'France, Japan, United Kingdom, United States, Canada',\n",
       "       'Mexico, Colombia, France', 'United States, Sweden',\n",
       "       'France, Brazil', 'Canada, Sri Lanka', 'France, Qatar, Morocco',\n",
       "       'Ireland, United States', 'Uruguay', 'Angola, South Africa',\n",
       "       'Germany, India, Austria', 'Guatemala, Uruguay',\n",
       "       'Argentina, Colombia', 'Qatar, Syria, France, Lebanon', 'Senegal',\n",
       "       'Mozambique', 'Denmark, Egypt, Germany', 'Singapore, Malaysia',\n",
       "       'United States, Netherlands, Canada, Lebanon',\n",
       "       'Japan, United States, France', 'Afghanistan, Germany, Palestine',\n",
       "       'France, India, Qatar', 'Palestine, Denmark, Lebanon',\n",
       "       'United States, United Kingdom, Germany', 'Uruguay, Mexico, Spain',\n",
       "       'Hong Kong, Philippines', 'Canada, Norway', 'China, Taiwan',\n",
       "       'Egypt, Saudi Arabia', 'Lebanon, United Kingdom, Denmark',\n",
       "       'Netherlands, Palestine, United States, Lebanon',\n",
       "       'Philippines, Japan',\n",
       "       'Canada, Greece, New Zealand, United Kingdom, Australia',\n",
       "       'United Kingdom, United States, Greece',\n",
       "       'United States, Austria, United Kingdom', 'Denmark, Iceland',\n",
       "       'Germany, United Kingdom, United States',\n",
       "       'France, Germany, United States', 'Japan, Thailand, United States',\n",
       "       'United Kingdom, Sweden', 'Romania, United States',\n",
       "       'Poland, South Korea, United States',\n",
       "       'Qatar, Mexico, United States, Switzerland, Argentina, Brazil, Germany',\n",
       "       'Canada, Ireland, United States', 'France, Luxembourg', 'Portugal',\n",
       "       'United States, Netherlands', 'India, Singapore, United States',\n",
       "       'Brazil, Italy',\n",
       "       'Hungary, Netherlands, Switzerland, United Kingdom', 'Chile, Peru',\n",
       "       'Peru, Spain', 'Brazil, United States',\n",
       "       'Belgium, United Kingdom, Germany', 'United States, Canada, China',\n",
       "       'South Africa, United States',\n",
       "       'United States, South Africa, United Kingdom', 'Afghanistan',\n",
       "       'New Zealand, Hong Kong', 'Singapore, United States',\n",
       "       'Czechia, Germany', 'Belgium, Luxembourg', 'Canada, South Africa',\n",
       "       'Romania, Sweden', 'Russia, United States',\n",
       "       'China, United Kingdom', 'Germany, France', 'Hungary, Canada',\n",
       "       'Israel, United States', 'Belgium, Germany',\n",
       "       'Philippines, Faroe Islands', 'Tanzania, United Kingdom',\n",
       "       'Nigeria, Canada'], dtype=object)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PC_Unique_values = df['production_countries'].unique()\n",
    "PC_Unique_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1ae1c438-7e43-4e14-802f-7b4399029fd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_dropdown_options(df, column):\n",
    "    # Extract unique values from the specified column\n",
    "    unique_values = df[column].unique()\n",
    "\n",
    "    # Separate values with and without commas\n",
    "    values_with_comma = [val for val in unique_values if ',' in val]\n",
    "    values_without_comma = [val for val in unique_values if ',' not in val]\n",
    "\n",
    "    # Combine values, prioritizing those without commas\n",
    "    sorted_values = values_without_comma + values_with_comma\n",
    "\n",
    "    # Create a dictionary where keys and values are the same\n",
    "    value_dict = {val: val for val in sorted_values}\n",
    "\n",
    "    # Convert to Dash dropdown options format\n",
    "    dropdown_options = [{'label': key, 'value': value} for key, value in value_dict.items()]\n",
    "\n",
    "    return dropdown_options"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "2f01da7c-d820-4532-8f7e-5001ce016de6",
   "metadata": {},
   "outputs": [],
   "source": [
    "age_certification_options = create_dropdown_options(df, 'age_certification')\n",
    "genres_options = create_dropdown_options(df, 'genres')\n",
    "production_countries_options = create_dropdown_options(df, 'production_countries')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5af813b1-c9ca-49e2-93c8-ad1d5696cc67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stars: Hunter Schafer, Jan Bluthardt, Marton Csokas\n",
      "\n",
      "Reluctantly, 17-year-old Gretchen leaves her American home to live with her father, who has just moved into a resort in the German Alps with his new family. Arriving at their future residence, they are greeted by Mr. König, her father's boss, who takes an inexplicable interest in Gretchen's mute half-sister Alma. Something doesn't seem right in this tranquil vacation paradise. Gretchen is plagued by strange noises and bloody visions until she discovers a shocking secret that also concerns her own family.\n",
      "(credit: IMDB)\n",
      "Stars:  Mark Walhberg, Halle Berry.\n",
      "\n",
      "Mike (Wahlberg) is happy living a simple life as a construction worker in his native New Jersey –– until his long-lost high school sweetheart, Roxanne (Berry), shows up with more on her mind than romance. Knowing he’s the right man for the job, she recruits Mike on a dangerous intelligence mission in Europe that thrusts them back together into a world of spies and high-speed car chases, with sparks flying along the way (credit: Netflix)\n",
      "Stars: Sarah Georgina, Elizabeth Nabben, Jennifer Saunders.\n",
      "\n",
      "Heroic poodle Freddy Lupin has everything it takes to lead his werewolf pack. Except respect. If only he were more... wolfish. But when a wayward wish transforms him into a werewolf and deposits a mischievous moon sprite on earth, Freddy must restore the cosmic order before earth and moon collide. Oops. One thing's for sure - Freddy will never question being a poodle again (cred: IMDB)\n",
      "Cast: Ray Liotta, Scott Eastwood, Tyrese Gibson\n",
      "\n",
      "In 1992, Mercer (Gibson) is desperately trying to rebuild his life and relationship with his son (Christopher A'mmanuel) amidst the turbulent 1992 L.A. uprising following the Rodney King verdict. Across town, another father and son (Liotta and Scott Eastwood) put their own strained relationship to the test as they plot a dangerous heist to steal catalytic converters, which contain valuable platinum, from the factory where Mercer works. As tensions rise in Los Angeles and chaos erupts, both families reach their boiling points when they collide. (credit: IMDD - Lionsgate)\n",
      "Cast: Raphael Alejandro, Bobby Cannavale, Kaitlin Olson\n",
      "\n",
      "Four freshmen navigate the terrors of adolescence at their first-ever high school party (credit: IMDB)\n"
     ]
    }
   ],
   "source": [
    "Cuckoo = (f\"Stars: Hunter Schafer, Jan Bluthardt, Marton Csokas\\n\\n\"\n",
    "f\"Reluctantly, 17-year-old Gretchen leaves her American home to live with her father, who has just moved into a resort in the German Alps with his new family. Arriving at their future residence, they are greeted by Mr. König, her father's boss, who takes an inexplicable interest in Gretchen's mute half-sister Alma. Something doesn't seem right in this tranquil vacation paradise. Gretchen is plagued by strange noises and bloody visions until she discovers a shocking secret that also concerns her own family.\\n(credit: IMDB)\")\n",
    "\n",
    "\n",
    "The_Union = (f\"Stars:  Mark Walhberg, Halle Berry.\\n\\n\"\n",
    "f\"Mike (Wahlberg) is happy living a simple life as a construction worker in his native New Jersey –– until his long-lost high school sweetheart, Roxanne (Berry), shows up with more on her mind than romance. Knowing he’s the right man for the job, she recruits Mike on a dangerous intelligence mission in Europe that thrusts them back together into a world of spies and high-speed car chases, with sparks flying along the way (credit: Netflix)\")\n",
    "\n",
    "wolf = (f\"Stars: Sarah Georgina, Elizabeth Nabben, Jennifer Saunders.\\n\\n\"\n",
    "f\"Heroic poodle Freddy Lupin has everything it takes to lead his werewolf pack. Except respect. If only he were more... wolfish. But when a wayward wish transforms him into a werewolf and deposits a mischievous moon sprite on earth, Freddy must restore the cosmic order before earth and moon collide. Oops. One thing's for sure - Freddy will never question being a poodle again (cred: IMDB)\")\n",
    "\n",
    "ninenty_two = (f\"Cast: Ray Liotta, Scott Eastwood, Tyrese Gibson\\n\\n\"\n",
    "f\"In 1992, Mercer (Gibson) is desperately trying to rebuild his life and relationship with his son (Christopher A'mmanuel) amidst the turbulent 1992 L.A. uprising following the Rodney King verdict. Across town, another father and son (Liotta and Scott Eastwood) put their own strained relationship to the test as they plot a dangerous heist to steal catalytic converters, which contain valuable platinum, from the factory where Mercer works. As tensions rise in Los Angeles and chaos erupts, both families reach their boiling points when they collide. (credit: IMDD - Lionsgate)\")\n",
    "\n",
    "Incoming = (f\"Cast: Raphael Alejandro, Bobby Cannavale, Kaitlin Olson\\n\\n\"\n",
    "f\"Four freshmen navigate the terrors of adolescence at their first-ever high school party (credit: IMDB)\")\n",
    "\n",
    " \n",
    "print(Cuckoo)\n",
    "print(The_Union)\n",
    "print(wolf)\n",
    "print(ninenty_two)\n",
    "print(Incoming)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d5e53830-05dc-4a67-bf9a-8f7a5817d085",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Movies have a profound impact on society, shaping cultural norms, influencing public opinion, and reflecting social issues.\n",
      " They serve as a powerful medium for storytelling, bringing diverse perspectives and fostering empathy.\n",
      "Through their portrayal of characters, conflicts, and resolutions, films can inspire change, challenge stereotypes, and raise awareness about critical topics.\n",
      "Additionally, movies offer a shared experience that unites audiences, sparking conversations and collective emotions.\n",
      "In essence, cinema not only entertains but also educates and motivates, leaving a lasting imprint on societal values and individual lives.\n"
     ]
    }
   ],
   "source": [
    "Impact = \"Movies have a profound impact on society, shaping cultural norms, influencing public opinion, and reflecting social issues.\\n They serve as a powerful medium for storytelling, bringing diverse perspectives and fostering empathy.\\nThrough their portrayal of characters, conflicts, and resolutions, films can inspire change, challenge stereotypes, and raise awareness about critical topics.\\nAdditionally, movies offer a shared experience that unites audiences, sparking conversations and collective emotions.\\nIn essence, cinema not only entertains but also educates and motivates, leaving a lasting imprint on societal values and individual lives.\"\n",
    "print(Impact)\n",
    "\n",
    "union = \"Netflix's upcoming movie, The Union, promises to be an exhilarating addition to its action-thriller lineup. Starring Mark Wahlberg and Halle Berry, the film follows two ex-special forces operatives who reunite to tackle a high-stakes mission. With Wahlberg's charisma and Berry's fierce determination, their on-screen chemistry is set to captivate audiences. Directed by a renowned filmmaker known for crafting edge-of-your-seat narratives, The Union combines intense action sequences, gripping drama, and unexpected twists. Fans can anticipate a roller-coaster ride of emotions and adrenaline, making it a must-watch for thriller enthusiasts. Stay tuned for its release date and get ready for an unforgettable cinematic experience.\"\n",
    "\n",
    "Dune = \"Dune: Part 2 continues the epic saga of Arrakis, delivering a breathtaking sequel that surpasses its predecessor in every way. Directed by Denis Villeneuve, the film masterfully adapts Frank Herbert's complex narrative, delving deeper into the political intrigue and mystical elements of the Dune universe.Timothée Chalamet returns as Paul Atreides, now embracing his destiny as the prophesied leader. His performance is both commanding and nuanced, capturing the weight of his character's responsibilities. Zendaya’s role as Chani is expanded, offering a compelling portrayal of strength and resilience. The ensemble cast, including Rebecca Ferguson, Oscar Isaac, and Javier Bardem, adds depth and gravitas to the story.Visually, Dune: Part 2 is a spectacle. The sweeping desert landscapes and intricate set designs are brought to life with stunning cinematography. Hans Zimmer’s score complements the visuals perfectly, enhancing the film's epic scale and emotional impact.The film excels in balancing grandiose action sequences with intimate character moments. The climactic battles are intense and meticulously choreographed, while the quieter scenes explore themes of power, betrayal, and destiny.In conclusion, Dune: Part 2 is a cinematic triumph that solidifies the franchise’s place in sci-fi history. It’s a must-watch for fans and newcomers alike, promising a thrilling, thought-provoking experience.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "82d4d6ef-1e8d-42fc-9255-adc4f2e80361",
   "metadata": {},
   "outputs": [],
   "source": [
    "import dash\n",
    "from dash import dcc, html\n",
    "from dash.dependencies import Input, Output, State, MATCH\n",
    "import joblib\n",
    "import pickle\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "\n",
    "# Load the trained model\n",
    "with open(\"movie-imdb-score-predictor2\", \"rb\") as f:\n",
    "    model = pickle.load(f)\n",
    "\n",
    "# Predict function\n",
    "def predict_imdb_score(input_data):\n",
    "    # Create a DataFrame for the input features\n",
    "    input_df = pd.DataFrame(input_data)\n",
    "    return model.predict(input_df)\n",
    "\n",
    "\n",
    "\n",
    "app = dash.Dash(__name__)\n",
    "app.title = 'FilmFutures'\n",
    "# Dropdown options\n",
    "\n",
    "\n",
    "app.layout = html.Div(style={'backgroundColor': 'black', 'color': 'black'}, children=[\n",
    "    html.Div(style={'display': 'flex', 'justifyContent': 'space-between', 'alignItems': 'center', 'backgroundColor': 'red', 'padding': '10px'}, children=[\n",
    "        html.H1('FilmFutures', style={'backgroundColor': 'red', 'color': 'white', 'padding': '10px'}),\n",
    "             html.Ul(style={'listStyleType': 'none', 'margin': '0', 'padding': '0', 'display': 'flex'}, children=[\n",
    "            html.Li(style={'margin': '0 10px'}, children=html.A('Check Movie Ratings', href='#movie-input', style={'color': 'white', 'textDecoration': 'none'})),\n",
    "            html.Li(style={'margin': '0 10px'}, children=html.A('Upcoming Movies', href='#upcoming-movies-list', style={'color': 'white', 'textDecoration': 'none'})),\n",
    "            html.Li(style={'margin': '0 10px'}, children=html.A('Top Rated Movies', href='#slideshow', style={'color': 'white', 'textDecoration': 'none'})),\n",
    "            html.Li(style={'margin': '0 10px'}, children=html.A('Blog', href='#blog-list', style={'color': 'white', 'textDecoration': 'none'})),\n",
    "            html.Li(style={'margin': '0 10px'}, children=html.A('Contact Us', href='#contact-us', style={'color': 'white', 'textDecoration': 'none'})),\n",
    "        ])\n",
    "    ]),\n",
    "    html.H1('Curious about movies rating? Predict it now!', style={'textAlign': 'center', 'backgroundColor': 'black', 'color': 'white'}),\n",
    "\n",
    "    html.Div(id='movie-input', style={'backgroundColor': 'black', 'padding': '20px', 'borderRadius': '10px', 'textAlign': 'center'}, children=[\n",
    "        html.Div(style={'display': 'flex', 'alignItems': 'center', 'marginBottom': '10px','width': '50%'}, children=[\n",
    "            html.Label('Title:', style={'color': 'white', 'width': '150px', 'textAlign': 'right', 'marginRight': '10px'}),\n",
    "            dcc.Input(id='title', type='text', style={'flex': '1', 'width': '10%'}),\n",
    "        ]),\n",
    "        html.Div(style={'display': 'flex', 'alignItems': 'center', 'marginBottom': '10px', 'width': '50%'}, children=[\n",
    "            html.Label('Release Date:', style={'color': 'white', 'width': '150px', 'textAlign': 'right', 'marginRight': '10px'}),\n",
    "            dcc.Input(id='release_date', type='text', style={'flex': '1', 'width': '10%'}),\n",
    "        ]),\n",
    "        html.Div(style={'display': 'flex', 'alignItems': 'center', 'marginBottom': '10px', 'width': '50%'}, children=[\n",
    "            html.Label('Type:', style={'color': 'white', 'width': '150px', 'textAlign': 'right', 'marginRight': '10px'}),\n",
    "            dcc.Input(id='type', type='text', placeholder='MOVIE/SHOW', style={'flex': '1', 'width': '50%'}),\n",
    "        ]),\n",
    "        html.Div(style={'display': 'flex', 'alignItems': 'center', 'marginBottom': '10px'}, children=[\n",
    "            html.Label('Age Certification:', style={'color': 'white', 'width': '150px', 'textAlign': 'right', 'marginRight': '10px'}),\n",
    "            dcc.Dropdown(id='age_certification', options=age_certification_options, style={'flex': '1', 'width': '50%'}),\n",
    "        ]),\n",
    "        html.Div(style={'display': 'flex', 'alignItems': 'center', 'marginBottom': '10px', 'width': '50%'}, children=[\n",
    "            html.Label('Runtime:', style={'color': 'white', 'width': '150px', 'textAlign': 'right', 'marginRight': '10px'}),\n",
    "            dcc.Input(id='runtime', type='number', style={'flex': '1', 'width': '50%'}),\n",
    "        ]),\n",
    "        html.Div(style={'display': 'flex', 'alignItems': 'center', 'marginBottom': '10px'}, children=[\n",
    "            html.Label('Genres:', style={'color': 'white', 'width': '150px', 'textAlign': 'right', 'marginRight': '10px'}),\n",
    "            dcc.Dropdown(id='genres', options=genres_options, style={'flex': '1', 'width': '50%'}),\n",
    "        ]),\n",
    "        html.Div(style={'display': 'flex', 'alignItems': 'center', 'marginBottom': '10px'}, children=[\n",
    "            html.Label('Production Countries:', style={'color': 'white', 'width': '150px', 'textAlign': 'right', 'marginRight': '10px'}),\n",
    "            dcc.Dropdown(id='production_countries', options=production_countries_options, style={'flex': '1', 'width': '50%'}),\n",
    "        ]),\n",
    "    ]),\n",
    "\n",
    "    html.Button('Predict', id='predict-button', n_clicks=0, style={'backgroundColor': 'red',  'color': 'white', 'margin': '10px'}),\n",
    "    \n",
    "    html.Div(id='output', style={'marginTop': '20px'}),\n",
    "    \n",
    "    html.H2('Upcoming Movies', style={'textAlign': 'center', 'backgroundColor': 'red', 'color': 'white'}),\n",
    "    html.Ul(id='movie-list', children=[\n",
    "        html.Li(html.Button('1. CUCKOO (August 9th). Type: MOVIE. Age Rated: R. Runtime: 84m(1h24m). Genre(s): horror, mystery, thriller. Countries: Germany,United States', id='movie-1', style={'backgroundColor': 'yellow', 'color': 'black', 'border': '1px solid white', 'textAlign': 'left', 'margin': '5px'})),\n",
    "        html.Div(id='movie-1-preview', style={'display': 'none', 'color': 'white', 'border': '5px solid white', 'margin': '5px'}, children=Cuckoo),\n",
    "        html.Li(html.Button('2. THE UNION (August 16). Type: MOVIE. Age Rated: R. Runtime: Unknown. Genre(s): thriller, action. Country: United States', id='movie-2', style={'backgroundColor': 'yellow', 'color': 'black', 'border': '1px solid white', 'textAlign': 'left', 'margin': '5px'})),\n",
    "        html.Div(id='movie-2-preview', style={'display': 'none', 'color': 'white'}, children=The_Union),\n",
    "        html.Li(html.Button('3. 200% wolf (August 8). Type: MOVIE. Age Rated: PG. Runtime: 98m(1h38m). Genre(s): animation, family. Countries: Australia, Germany, Spain, Mexico.', id='movie-3', style={'backgroundColor': 'yellow', 'color': 'black', 'border': '1px solid white', 'textAlign': 'left', 'margin': '5px'})),\n",
    "        html.Div(id='movie-3-preview', style={'display': 'none', 'color': 'white'}, children=wolf),\n",
    "        html.Li(html.Button('4. 1992 (August 30th). Type: MOVIE. Age Rated: R. Runtime: Unknown. Genre(s): action, drama, thriller. Country: United Stats', id='movie-4', style={'backgroundColor': 'yellow', 'color': 'black', 'border': '1px solid white', 'textAlign': 'left', 'margin': '5px'})),\n",
    "        html.Div(id='movie-4-preview', style={'display': 'none', 'color': 'white'}, children=ninenty_two),\n",
    "        html.Li(html.Button('5. Incoming (August 23). Type: MOVIE. Age Rated: R. Runtime: Unknown. Genre(s): comedy. Country: United States', id='movie-5', style={'backgroundColor': 'yellow', 'color': 'black', 'border': '1px solid white', 'textAlign': 'left', 'margin': '5px'})),\n",
    "        html.Div(id='movie-5-preview', style={'display': 'none', 'color': 'white'}, children=Incoming)\n",
    "    ]),\n",
    "\n",
    "    html.H2('Select Month', style={'textAlign': 'center', 'backgroundColor': 'red', 'color': 'white'}),\n",
    "    dcc.Dropdown(\n",
    "        id='month-dropdown',\n",
    "        options=[\n",
    "            {'label': 'AUGUST', 'value': 'AUGUST'},\n",
    "            {'label': 'SEPTEMBER', 'value': 'SEPTEMBER'},\n",
    "            {'label': 'OCTOBER', 'value': 'OCTOBER'},\n",
    "            {'label': 'NOVEMBER', 'value': 'NOVEMBER'},\n",
    "            {'label': 'DECEMBER', 'value': 'DECEMBER'}\n",
    "        ],\n",
    "        value='January',\n",
    "        style={'color': 'black'}\n",
    "    ),\n",
    "    html.Div(id='upcoming-movies-list', style={'marginTop': '20px'}),\n",
    "\n",
    "    html.H2('Top Rated Movies in Each Country', style={'textAlign': 'center', 'backgroundColor': 'red', 'color': 'white'}),\n",
    "    dcc.Interval(id='interval', interval=2000, n_intervals=0),\n",
    "    html.Div(id='slideshow', style={'textAlign': 'center', 'backgroundColor': 'black', 'color': 'white', 'padding': '20px'}),\n",
    "\n",
    "    html.H2('Blog', style={'textAlign': 'center', 'backgroundColor': 'red', 'color': 'white'}),\n",
    "    html.Ul(id='blog-list', children=[\n",
    "        html.Li(html.Button('The Impact of Movies on Society', id='blog-1', style={'backgroundColor': 'yellow', 'color': 'black', 'border': '1px solid white', 'textAlign': 'left', 'margin': '5px'})),\n",
    "        html.Div(id='blog-1-article', style={'display': 'none', 'color': 'white'}, children=Impact),\n",
    "        html.Li(html.Button('The Union: A Thrilling New Netflix Movie Starring Mark Wahlberg and Halle Berry', id='blog-2', style={'backgroundColor': 'yellow', 'color': 'black', 'border': '1px solid white', 'textAlign': 'left', 'margin': '5px'})),\n",
    "        html.Div(id='blog-2-article', style={'display': 'none', 'color': 'white'}, children=union),\n",
    "        html.Li(html.Button('Dune: Part 2 - A Cinematic Triumph', id='blog-3', style={'backgroundColor': 'yellow', 'color': 'black', 'border': '1px solid white', 'textAlign': 'left', 'margin': '5px'})),\n",
    "        html.Div(id='blog-3-article', style={'display': 'none', 'color': 'white'}, children=Dune)\n",
    "    ]),\n",
    "\n",
    "    html.H2('Contact Us', style={'textAlign': 'center', 'backgroundColor': 'red', 'color': 'white'}),\n",
    "    html.Div(id='contact-us', style={'backgroundColor': 'black', 'color': 'white', 'padding': '20px', 'textAlign': 'center'}, children=[\n",
    "        html.P('For any inquiries, please email us at: michaelologungbara@gmail.com'),\n",
    "        html.P('copyright: supermic')\n",
    "    ])\n",
    "])\n",
    "\n",
    "\n",
    "\n",
    "@app.callback(\n",
    "    Output('output', 'children'),\n",
    "    Input('predict-button', 'n_clicks'),\n",
    "    State('title', 'value'),\n",
    "    State('release_date', 'value'),\n",
    "    State('type', 'value'),\n",
    "    State('age_certification', 'value'),\n",
    "    State('runtime', 'value'),\n",
    "    State('genres', 'value'),\n",
    "    State('production_countries', 'value')\n",
    ")\n",
    "\n",
    "def update_output(n_clicks, title, release_date, type_, age_certification, runtime, genres, production_countries):\n",
    "    if n_clicks > 0:\n",
    "        if not all([title, release_date, type_, age_certification, runtime, genres, production_countries]):\n",
    "            return 'Please enter all features for the movie.'\n",
    "        \n",
    "        input_data = [{\n",
    "            'type': type_,\n",
    "            'age_certification': age_certification,\n",
    "            'runtime': runtime,\n",
    "            'genres': genres,\n",
    "            'production_countries': production_countries\n",
    "        }]\n",
    "        \n",
    "        prediction = predict_imdb_score(input_data)[0]\n",
    "        return html.Div(children=[\n",
    "            html.P(f'Title: {title}', style={'color': 'white'}),\n",
    "            html.P(f'Release Date: {release_date}', style={'color': 'white'}),\n",
    "            html.P(f'Predicted IMDb score: {prediction:.2f}', style={'color': 'white'}),\n",
    "        ])\n",
    "    return ''\n",
    "\n",
    "@app.callback(\n",
    "    Output('movie-1-preview', 'style'),\n",
    "    Input('movie-1', 'n_clicks'),\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "def toggle_movie_1_preview(n_clicks):\n",
    "    if n_clicks % 2 == 1:\n",
    "        return {'display': 'block', 'color': 'white'}\n",
    "    else:\n",
    "        return {'display': 'none'}\n",
    "\n",
    "@app.callback(\n",
    "    Output('movie-2-preview', 'style'),\n",
    "    Input('movie-2', 'n_clicks'),\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "def toggle_movie_2_preview(n_clicks):\n",
    "    if n_clicks % 2 == 1:\n",
    "        return {'display': 'block', 'color': 'white'}\n",
    "    else:\n",
    "        return {'display': 'none'}\n",
    "\n",
    "@app.callback(\n",
    "    Output('movie-3-preview', 'style'),\n",
    "    Input('movie-3', 'n_clicks'),\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "def toggle_movie_3_preview(n_clicks):\n",
    "    if n_clicks % 2 == 1:\n",
    "        return {'display': 'block', 'color': 'white'}\n",
    "    else:\n",
    "        return {'display': 'none'}\n",
    "\n",
    "@app.callback(\n",
    "    Output('movie-4-preview', 'style'),\n",
    "    Input('movie-4', 'n_clicks'),\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "def toggle_movie_4_preview(n_clicks):\n",
    "    if n_clicks % 2 == 1:\n",
    "        return {'display': 'block', 'color': 'white'}\n",
    "    else:\n",
    "        return {'display': 'none'}\n",
    "\n",
    "@app.callback(\n",
    "    Output('movie-5-preview', 'style'),\n",
    "    Input('movie-5', 'n_clicks'),\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "\n",
    "def toggle_movie_5_preview(n_clicks):\n",
    "    if n_clicks % 2 == 1:\n",
    "        return {'display': 'block', 'color': 'white'}\n",
    "    else:\n",
    "        return {'display': 'none'}\n",
    "\n",
    "@app.callback(\n",
    "    Output('upcoming-movies-list', 'children'),\n",
    "    Input('month-dropdown', 'value')\n",
    ")\n",
    "\n",
    "def update_movie_list(month):\n",
    "    if month:\n",
    "        upcoming_movies = {\n",
    "            'AUGUST': ['CUCKOO (2ND)', 'HAROLD AND THE PURPLE CRAYON (2ND)', 'TRAP (9TH)', 'BORDERLANDS (9TH)', 'IT ENDS WITH US (9TH)', 'ALIEN: ROMULUS (16TH)', 'THE UNION(16TH)', '1992 (30TH)', 'SKINCARE (16TH)', 'THE FORGE (23RD)', 'REAGAN (30TH)'],\n",
    "            'SEPTEMBER': ['BEETLEJUICE BEETLEJUICE (6TH)', 'THE KILLERS GAME (13TH)', 'SPEAK NO EVIL (13TH)', 'A DIFFERENT MAN (20TH)', 'TRANSFORMERS ONE (20TH)', 'WOLFS (20TH)', 'MEGALOPOLIS (27TH)', 'THE WILD ROBOT (27TH)'],\n",
    "            '0CTOBER': ['JOKER: FOLIE A DEUX (4TH)', 'WHITEBIRD (4TH)', 'PIECE BY PIECE (11TH)', 'SCARYGIRL (11TH)', 'TERRIFIER 3 (11TH)', 'WE LIVE IN TIME (11TH)', 'FLIGHT RISK (18TH)', 'VENOM: THE LAST DANCE (25TH)'],\n",
    "            'NOVEMBER': ['CONCLAVE (8TH)', 'BACK IN ACTION (15TH)', 'HERETIC (15TH)', 'RED ONE (15TH)', 'HERE (15TH)', 'GLADIATOR (22ND)', 'WICKED (22ND)', 'MOANA (27TH)'],\n",
    "            'DECEMBER': ['NIGHTBITCH (6TH)', 'KRAVEN THE HUNTER (13TH)', 'THE LORD OF THE RINGS: THE WAR OF THE ROHIRIM (13TH)', 'BABYGIRL (20TH)', 'SONIC THE HEDGEHOG 3 (20TH)', 'THE FIRE INSIDE (25TH)', 'NOSFERATU (25TH)']\n",
    "        }\n",
    "        movies = upcoming_movies.get(month, [])\n",
    "        return html.Ul(children=[\n",
    "            html.Li(html.Button(movie, id={'type': 'movie-button', 'index': i}, style={'backgroundColor': 'black', 'color': 'white', 'border': 'none', 'textAlign': 'left'})) for i, movie in enumerate(movies)\n",
    "        ])\n",
    "    return ''\n",
    "\n",
    "@app.callback(\n",
    "    Output({'type': 'movie-button', 'index': MATCH}, 'children'),\n",
    "    Input({'type': 'movie-button', 'index': MATCH}, 'n_clicks'),\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "def show_movie_preview(n_clicks):\n",
    "    if n_clicks % 2 == 1:\n",
    "        return html.Div('This is a preview of the movie.')\n",
    "    else:\n",
    "        return html.Div('')\n",
    "\n",
    "@app.callback(\n",
    "    Output('slideshow', 'children'),\n",
    "    Input('interval', 'n_intervals')\n",
    ")\n",
    "def update_slideshow(n_intervals):\n",
    "    # Hypothetical data for top-rated movies in each country\n",
    "    country_movie_data = [\n",
    "        {'country': 'USA', 'movies': [{'title': 'Dune: Part Two', 'rating': 8.6}, {'title': 'Furiosa: A Mad Max Saga', 'rating': 7.7}, {'title': 'A Quiet Place: Day One', 'rating': 6.8}, {'title': 'Kingdom of the Planet Of The Apes', 'rating': 7.1}, {'title': 'The Fall Guy', 'rating': 7.1}]},\n",
    "        {'country': 'UK', 'movies': [{'title': 'Monkey Man', 'rating': 6.9}, {'title': 'Kill', 'rating': 7.9}, {'title': 'American Fiction', 'rating': 7.5}, {'title': 'The Iron Claw', 'rating': 7.6}, {'title': 'One Life', 'rating': 7.5}, {'title': 'Love Lies Bleeding', 'rating': 6.7}, {'title': 'The Bikeriders', 'rating': 7.1}]},\n",
    "        {'country': 'Japan', 'movies': [{'title': 'Inside Out', 'rating': 7.9}, {'title': 'Movie H', 'rating': 8.9}, {'title': 'Movie I', 'rating': 8.7}]},\n",
    "        {'country': 'Nigeria', 'movies': [{'title': 'Movie J', 'rating': 9.4}, {'title': 'Movie K', 'rating': 8.9}, {'title': 'Movie L', 'rating': 8.7}]},\n",
    "        {'country': 'India', 'movies': [{'title': 'Movie M', 'rating': 9.5}, {'title': 'Movie N', 'rating': 8.9}, {'title': 'Movie O', 'rating': 8.8}]}\n",
    "    ]\n",
    "    country_index = n_intervals % len(country_movie_data)\n",
    "    country_data = country_movie_data[country_index]\n",
    "\n",
    "    fig = px.bar(\n",
    "        pd.DataFrame(country_data['movies']),\n",
    "        x='title',\n",
    "        y='rating',\n",
    "        title=f'Top Rated Movies in {country_data[\"country\"]}',\n",
    "        labels={'rating': 'IMDb Rating', 'title': 'Movie Title'},\n",
    "        color='rating'\n",
    "    )\n",
    "\n",
    "    return dcc.Graph(figure=fig)\n",
    "\n",
    "@app.callback(\n",
    "    Output('blog-1-article', 'style'),\n",
    "    Input('blog-1', 'n_clicks'),\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "def toggle_blog_1_article(n_clicks):\n",
    "    if n_clicks % 2 == 1:\n",
    "        return {'display': 'block', 'color': 'white'}\n",
    "    else:\n",
    "        return {'display': 'none'}\n",
    "\n",
    "@app.callback(\n",
    "    Output('blog-2-article', 'style'),\n",
    "    Input('blog-2', 'n_clicks'),\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "def toggle_blog_2_article(n_clicks):\n",
    "    if n_clicks % 2 == 1:\n",
    "        return {'display': 'block', 'color': 'white'}\n",
    "    else:\n",
    "        return {'display': 'none'}\n",
    "\n",
    "@app.callback(\n",
    "    Output('blog-3-article', 'style'),\n",
    "    Input('blog-3', 'n_clicks'),\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "def toggle_blog_3_article(n_clicks):\n",
    "    if n_clicks % 2 == 1:\n",
    "        return {'display': 'block', 'color': 'white'}\n",
    "    else:\n",
    "        return {'display': 'none'}\n",
    "\n",
    "#if __name__ == '__main__':\n",
    " #   app.run_server(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "05c90640-fe7c-41da-ba75-4b526a46550b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dash app running on http://127.0.0.1:8070/\n"
     ]
    }
   ],
   "source": [
    "app.run(jupyter_mode=\"external\", port=8070)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3589597f-93fa-4ae3-b000-c78b265ada01",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
